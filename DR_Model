import time
from feature_extraction import features_extraction_
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import sys
from sklearn.model_selection import train_test_split

# open the input file
with open('RML2016.10a_dict.pkl', 'rb') as f:
    data = pickle.load(f, encoding='latin1')  # Use 'latin1' encoding to avoid Unicode errors

with open('data_details.txt', 'w') as f:
    for key, signals in data.items():
        mod_type, snr = key
        print(f"Modulation Type: {mod_type}, SNR: {snr}, Shape: {signals.shape}", file=f)

##Set a runtime timer for the training only
start_time = time.time()

#creat dataframe
features_df = features_extraction_(data)

# Create new dataframe for target variable or label column for supervised learning
y = pd.DataFrame(features_df['signal_type'])

 # convert the target variable into into numerical valuesto a numerical value
 label_encoder = LabelEncoder()
 encoded_labels = label_encoder.transform(y)

# Create new dataframe for features variables or training columns for supervised learning
training_features = ["magnitude_mean", "magnitude_std", "magnitude_skew", "magnitude_kurtosis", "phase_mean", "phase_std", "phase_skew", "phase_kurtosis", "spectral_entropy", "peak_frequency", "average_power"]
feature_transform = features_df[training_features]
X = pd.DataFrame(columns=training_features, data=feature_transform, index=features_df.index)

# split the data for 70% train and 30% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an SVM classifier (use linear kernel in this example)
svm_model = SVC(kernel='linear', random_state=42)

# Train the model
svm_model.fit(X_train, y_train)

# Predict on the test set
y_pred = svm_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

#auc_roc = roc_auc_score(y_test, y_pred)
#print("AUC-ROC:", auc_roc)

# Confusion matrix
confusionMatrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(confusionMatrix)

# Plotting confusion matrix
plt.figure(figsize=(5, 5))
sns.heatmap(confusionMatrix, annot=True, annot_kws={"fontsize": 12}, fmt="d", cmap="Blues", cbar=False, linewidths=0.5, linecolor="black")
plt.title("Signal Type Confusion Matrix", fontsize=14)
plt.xlabel("Predicted", fontsize=14)
plt.ylabel("Actual", fontsize=14)
plt.xticks(ticks=[0.5, 1.5, 2.5, 3.5, 4.5], labels=["BPSK","QPSK","QAM16","WBFM","GFSK"], fontsize=10)
plt.yticks(ticks=[0.5, 1.5, 2.5, 3.5, 4.5], labels=["BPSK","QPSK","QAM16","WBFM","GFSK"], fontsize=10)
plt.show()
